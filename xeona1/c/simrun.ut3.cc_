//  XEONA ENERGY SYSTEMS MODELING ENVIRONMENT
//
//  file-create-name : simcall.ut1.cc
//  file-create-date : Mon 03-Dec-2007 18:01 UTC
//  file-initiator   : Robbie Morrison <robbie@actrix.co.nz>
//
//  file-role        : test 'simulate' function [highly incomplete]
//  file-status      : set-aside
//  file-release-tag :
//
//  LEGAL NOTICE
//
//  Software  : This file is part of the source code for the xeona energy
//              systems modeling environment.
//  License   : This software is distributed under the GNU General Public
//              License version 3, a copy of which is provided in the text
//              file LICENSE_GPLv3.
//  Warranty  : There is no warranty for this software, to the extent permitted
//              by applicable law.  Refer to the license for further details.
//  Copyright : This software is copyright (c) 2007 - 2012 Robbie Morrison.
//  Request   : The software is distributed with the request that you forward
//              any modifications you make to the xeona project for possible
//              inclusion in the main codebase.
//
//  PROJECT CONTACT
//
//  Robbie Morrison
//  Institute for Energy Engineering
//  Technical University of Berlin
//  Marchstrasse 18, D-10587 Berlin, Germany
//  Email: robbie@actrix.co.nz
//
//  SVN VERSION CONTROL
//
//  $Author: robbie $
//  $URL: file:///home/robbie/svn-root/xeona/futz/trunk/xeona1/c/simrun.ut3.cc_ $
//
//  GENERAL NOTES FOR THIS FILE
//
//  This is a unit test file and hence not essential to the
//  application proper.

//  AD-HOC NOTES

//  LOCAL AND SYSTEM INCLUDES

#include "../c/simcall.h"     // unit under test (place early)
#include "../c/datio.h"       // unit under test (place early)
#include "../c/recset.h"      // unit under test (place early)
#include "../b/register.h"    // entity subclass registrations
#include "../b/entity.h"      // entity base class
#include "../c/factory.h"     // entity factory
#include "../a/logger.h"      // standard logging functionality (as required)
#include "../c/smart_ptr.h"   // toggle between Boost and TR1 smart pointers
#include ".././common.h"      // common definitions for project (place last)

#include <sstream>            // string-streams

//  CODE

// ---------------------------------------------------------
//  MAIN FUNCTION   : main
// ---------------------------------------------------------

int
main(int argc, char* argv[])
{
  logga::spLogger logger = logga::ptrLogStream();  // main function logger
  logger->repx(logga::info, "beginning of main", "~~~~~~~~~~");
  logger->addSmartBlank();

  logger->setReportLevel(logga::adhc);       // maximum reporting
  std::ostringstream put;

  // ---------------------------------------------------------
  //  test ONE        : call simulation
  // ---------------------------------------------------------

  logger->test(1);

  const std::string cmdLineModelName = "test";

  put << "    command line model name (faked) : " << cmdLineModelName << "\n";
  logger->putx(logga::dbug, put);

  xeona::SimRet sret = xeona::simulate(cmdLineModelName, xeona::e_hollowCall);

  put << "    return (xeona::SimRet)          : " << sret << "\n";
  logger->putx(logga::dbug, put);

  // ---------------------------------------------------------
  //  HOUSEKEEPING
  // ---------------------------------------------------------

  logger->test(0);                           // test end

  logger->repx(logga::info, "end of main", "~~~~~~~~~~");
  return xeona::exit_success;

} // main function

//  end of file

