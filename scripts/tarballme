#! /bin/bash

#  file-purpose     : create release-based xeona tarball
#  file-initiator   : Robbie Morrison <robbie@actrix.co.nz>
#  file-create-date : Mon 18-Jan-2010 16:56 UTC
#  file-status      : working but evolving
#  file-keywords    : xeona

#  $Author: robbie $
#  $URL: file:///home/robbie/svn-root/xeona/futz/trunk/scripts/tarballme $

#  Notes
#
#      see, for example, use of $ tar --transform='s,^,xeona.r0000/,'
#
#      extras generated by makefile would be better

# ---------------------------------
#  settings
# ---------------------------------

host=$(hostname --short)
case "$host" in
    hinau) SVNBASE="$HOME/$SYNK/xeona/svn2/futz/trunk"  ;;  # svn version base for the purposes of this script
    sojus) SVNBASE="$HOME/$SYNK/xeona/svn/futz"         ;;  # svn version base for the purposes of this script
    *)     SVNBASE="$HOME/$SYNK/xeona/svn/futz"         ;;  # svn version base for the purposes of this script
esac

TBDIR="$HOME/$SYNK/xeona/xeona-tarballs"     # tarball directory
MAINCC="main.cc"                             # main file used to check correct directory
BINSTUB="xeona"                              # binary stub
TBSTUB="xeona"                               # tarball stub
README="README.txt"                          # base readme file

MANS="DOCS/manuals"                          # manuals subdirectory
MANPDF="userman.pdf"                         # user manual

# ---------------------------------
#  preamble
# ---------------------------------

TAR="/bin/tar"                               # tar utility
GZIP="/bin/gzip"                             # gzip utility

SCRIPT=$( basename "$0" )                    # script

E_SUCCESS=0
E_FAILURE=1
E_USAGE=2
E_CHECK_FAILURE=64
E_MISSING_FILES=65

# ---------------------------------
#  display_help()
# ---------------------------------

function display_help
{
    echo
    echo "      usage: $SCRIPT             create tarball"
    echo "             $SCRIPT --dryrun    process but do not create tarball"
#   echo "             $SCRIPT --readme    open base '$README' file for editing"
    echo "             $SCRIPT --help      display this message and exit"
    echo "    purpose: create release-based xeona tarball with svn revision in filename"
    echo "      notes: - must be run from 'main.cc' directory"
    echo "             - requires a clean 'svnversion' report"
    echo "             - looks for correct xeona.r0000"
    echo "             - includes only the necessary files"
    echo "  hardcodes: tarball dir: $TBDIR"
    echo
}

# ---------------------------------
#  display_workflow()
# ---------------------------------

function display_workflow
{
    local stub=${MANPDF%.pdf}
    local dox="$MANS"

    local date=$( date --utc '+%d %B %Y' )
    local tbdir="$TBDIR"

    local svn=$( svnversion .. )        # can be slow
    local tmp
    printf -v tmp "%d" "$svn" 2>/dev/null && let "svn = tmp + 1"
    test "$tmp" == "0" && svn="faulty ($svn)"

    cat <<EOM
       stub: $stub"
   workflow:  -  save all source files
              1  commit and update
              2  \$ svnversion ..
              -  \$ cd $dox
              3  \$ memacs $stub.texi
                 update flags (SVN increment attempted, DATE is UTC):
                     SVN      $svn
                     DATE     $date
                     STATUS   <blank>
              4  commit and update
              5  \$ ./texime.sh
              6  \$ pdfrobbie $stub.pdf
              7  \$ mach -dfrx
              -  \$ $SCRIPT --dryrun
              8  \$ $SCRIPT
              9  \$ cd $tbdir
EOM
    echo
}

# ---------------------------------
#  display_main()
# ---------------------------------

function display_main
{
     if test -f "$MAINCC"
         then
         return $E_SUCCESS              # do nothing is correct
     else
         echo "    warning: incorrect directory, proxy file not found: $MAINCC"
         echo
         return $E_FAILURE
     fi
}

# ---------------------------------
#  edit_readme()
# ---------------------------------

function edit_readme
{
    local FONT="-misc-fixed-medium-r-normal--13-*-*-*-*-80-iso8859-15"
    local TITLE="$README ($SCRIPT)"

    # check for files
    if [ ! -f "$MAINCC" ]
        then
        echo "$SCRIPT: FATAL: not in directory containing indicator file: $MAINCC"
        return $E_CHECK_FAILURE
    fi

    if [ ! -f "$README" ]
        then
        echo "$SCRIPT: FATAL: readme file not found: $README"
        return $E_MISSING_FILES
    fi

    # check for emacs
    if [ ! $(which emacs) ]             # CAUTION: for test, no -n and no soft-quotes
        then
        echo "$SCRIPT: FATAL: emacs editor not found: $(which emacs)"
        return $E_CHECK_FAILURE
    fi

    emacs -font "$FONT" -title "$TITLE" "$README" &
    return $E_SUCCESS
}

# ---------------------------------
#  process command-line
# ---------------------------------

mode=

case "$1" in
    --help|--hel|--he|--h|-help|-hel|-he|-h|"-?")
        shift
        display_help
        display_workflow
        display_main
        exit $?
        ;;
    --readme|--read|--r|-r)
        shift
#       edit_readme
#       exit $?                         # exit with function call return value
        echo "$SCRIPT: option --readme currently disabled"
        exit $E_USAGE
        ;;
    --dryrun|--dry-run|-d|-y)
        shift
        mode="dryrun"
        ;;
    "")
        mode="real"
        ;;
    *)
        echo "$SCRIPT: try --help for usage"
        exit $E_USAGE
        ;;
esac

# ---------------------------------
#  get_svnver()
# ---------------------------------

svnver=""                               # revision as integer or zero indicates stale
mess=""                                 # used in error reporting

function get_svnver
{
    svnver=$( svnversion "$SVNBASE" 2>/dev/null )

    # if svnver contains : then an update is needed
    # if svnver contains M then a commit and update is needed

    test $(expr index "$svnver" ":") -ne 0 && mess="update"
    test $(expr index "$svnver" "M") -ne 0 && mess="commit and update"
    test -n "$mess" && svnver=0         # else revision as integer

    # check integrity
    if [ $svnver -eq 0 ]
        then
        echo "$SCRIPT: FATAL: stale svn version: $mess"
        case "$mode" in
            dryrun) return 0  ;;
            real)   return 1  ;;
        esac
    fi
}

# ---------------------------------
#  create_filelist()
# ---------------------------------

function create_filelist
{
    # CAUTION: 'echo' interprets leading "-neE" as options

    # locals
    local bin="$binary"
    local mak="makefile"                # makefile (note capitalization)
    local headers=""                    # determined below
    local sources=$( make ccs )         # 'ccs' is list sources
    local extras=$( make hs )           # 'hs' is list unaccompanied headers
    local special="a/xedocs.txt"        # used for XEDOC generation
    local shells=""                     # determined below
    local docs=$( find -P DOCS -maxdepth 1 -name '*.txt' -type f )
    local models=""                     # determined below
    local guides="$manualtar"           # special archive version
    local depends="dependsfile"         # normally regenerated added to avoid the need for 'fastdep'
    local last="lastbuild"              # last build details
    local license="LICENSE_GPLv3"

    # shell scripts
    # options: configure.sh sysinfo.sh testme.sh
    shells="sysinfo.sh testme.sh"

    # headers
    sources=$( echo $sources )          # clean
    for source in $sources
      do
      test "$source" == "./main.cc" && continue   # no associated header
      stub=${source%".cc"}              # strip ".cc"
      headers="$headers $stub.h"        # load header
    done

    # models
    models="
xeona-xmoks/submodel.10.guard.xem
xeona-xmoks/submodel.11.guard.xem
xeona-xmoks/submodel.15.guard.xem
"

    # concatenate and clean
    files=$( echo $bin $mak $headers $sources $extras $special $shells $docs $models $guides $depends $last $license )

    # test list integrity
    for file in $files
      do
      if [ ! -f "$file" ]
          then
          echo "  absent file: $file"
          let "failflag++"
          let "nofileflag++"
      fi
    done
    test $nofileflag -eq 0 || echo  "$SCRIPT: FATAL: files not found: $nofileflag"
}

# ---------------------------------
#  make_tbtext_file
# ---------------------------------

tbtextfile="name-not-overwritten"

function make_tbtext_file
{
    local svn="$svnver"
    local date=$( date --utc +'%a %d-%b-%Y %H:%M %Z' )
    local manual="xeona.r$svn/$manualtar"
    local call="$ cd xeona.r$svn && ./testme.sh --help"

    test -f "$tbtextfile" &&
    {
        rm --force --verbose $tbtextfile
        echo "$SCRIPT: removed tarball text file, will generate afresh: $tbtextfile"
    }

    {
        cat <<EOF

XEONA TAR DISTRIBUTION DETAILS

Revision         : r$svn
Timestamp        : $date
User manual      : $manual
Website          : (none at present)
Run test suite   : $call

LEGAL NOTICE

Software  : This file is part of the source code for the xeona energy
            systems modeling environment.
License   : This software is distributed under the GNU General Public
            License version 3, a copy of which is provided in the text
            file LICENSE_GPLv3.
Warranty  : There is no warranty for this software, to the extent permitted
            by applicable law.  Refer to the license for further details.
Copyright : This software is copyright (c) 2007 - 2010 Robbie Morrison.
Request   : The software is distributed with the request that you forward
            any modifications you make to the xeona project for possible
            inclusion in the main codebase.

PROJECT CONTACT

Robbie Morrison
Institute for Energy Engineering
Technical University of Berlin
Marchstrasse 18, D-10587 Berlin, Germany
Email: robbie@actrix.co.nz

===

EOF
    } >> "$tbtextfile"

    chmod 0440 "$tbtextfile"

    return 0
}

# ---------------------------------
#  locate_key_files()
# ---------------------------------

function locate_key_files
{
    if [ ! $(which svnversion) ]
        then
        echo "$SCRIPT: FATAL: svnversion not found"
        let "failflag++"
    fi

    if [ ! -d "$TBDIR" ]
        then
        echo "$SCRIPT: FATAL: tarball directory not found: $TBDIR"
        let "failflag++"
    fi

    if [ ! -f "$MAINCC" ]
        then
        echo "$SCRIPT: FATAL: not in directory containing indicator file: $MAINCC"
        let "failflag++"
    fi
    return 0
}

# ---------------------------------
#  process_manual()
# ---------------------------------

function process_manual
{
    if [ ! -f "$manual" ]
        then
        echo "$SCRIPT: FATAL: user manual not found: $manual"
        let "failflag++"
        return 1
    fi
    cp --force $manual $manualtar
    if [ $? -ne 0 ]
        then
        echo "$SCRIPT: problem with user manual cp: $manual to $manualtar"
        let "failflag++"
        return 1
    fi
    chmod 0440 $manualtar
    if [ $? -ne 0 ]
        then
        echo "$SCRIPT: chmod problem with user manual tar: $manualtar"
        let "failflag++"
        return 1
    fi
    if [ ! -f "$manualtar" ]
        then
        echo "$SCRIPT: FATAL: tar user manual not found: $manualtar"
        let "failflag++"
        return 1
    fi
    return 0
}

# ---------------------------------
#  locate_release_binary()
# ---------------------------------

function locate_release_binary
{
    if [ ! -f "$binary" ]
        then
        echo "$SCRIPT: FATAL: suitable binary not found (try mach -dfrx): $binary"
        let "failflag++"
        return 1
    else
        return 0
    fi
}

# ---------------------------------
#  confirm_no_tarball()
# ---------------------------------

function confirm_no_tarball
{
    if [ -f "$tarball" ]
        then
        echo "$SCRIPT: FATAL: tarball already created: $tarball"
        let "failflag++"
        return 1
    else
        return 0
    fi
}

# ---------------------------------
#  preliminary code
# ---------------------------------

failflag=0
nofileflag=0

# confirm svnversion utility
# confirm tarball directory
# confirm main.cc (as proxy for correct directory)
# get svn version and check not stale ELSE exit
# generate release binary name and confirm
# generate tarball name and check not used
# create file list and confirm
# IF errors THEN exit

echo "$SCRIPT: run = $mode"

locate_key_files                        # svnversion, 'TBDIR', 'MAINCC'
get_svnver || exit $E_CHECK_FAILURE     # no point in continuing in real mode

binary="$BINSTUB.r$svnver"              # generate release binary name

locate_release_binary

tarleaf="$TBSTUB.r$svnver.tar"          # generate leaf name without '.gz'
tarball="$TBDIR/$tarleaf"               # generate full name

confirm_no_tarball                      # uses 'tarball'

manual="DOCS/manuals/$MANPDF"
manualtar="DOCS/manuals/xeona.r$svnver.$MANPDF"

process_manual                          # archive version of manual
create_filelist                         # archive files

tbtextfile="xeona.r$svnver.txt"         # parent level text file

# ---------------------------------
#  dryrun and failure code
# ---------------------------------

case "$mode" in
    dryrun)
        rm --force $manualtar

        filecount=0
        echo "$SCRIPT: archive files:"
        for file in $files
          do
          let "filecount++"
          echo "  $file"
        done
        echo "  $tbtextfile # generated file in parent directory"

        echo "$SCRIPT: archive: $tarball.gz"
        echo "$SCRIPT: subdirectory files: present $filecount, missing $nofileflag"
        echo "$SCRIPT: svn: $svnver, fails: $failflag"
        outcome="FAIL"
        test $svnver -gt 0 -a $failflag -eq 0 -a $nofileflag -eq 0 && outcome="PASS"
        echo "$SCRIPT: dryrun outcome: $outcome"
        exit $E_SUCCESS
        ;;
    real)
        if [ $failflag -eq 0 ]
            then
            make_tbtext_file
        else
            exit $E_CHECK_FAILURE
        fi
        ;;
esac

# ---------------------------------
#  archive code
# ---------------------------------

echo

# CAUTION: the following transform fails: subdir="s/^/$TBSTUB.r$svnver\//"
# better to use ',' as the separating char

subdir="s,^,$TBSTUB.r$svnver/,"         # that is, prepend: xeona.r0000/

$TAR \
    --create --verbose \
    --transform="$subdir" --show-transformed-names \
    --file="$tarball" $files

$TAR \
    --append --verbose \
    --file="$tarball" $tbtextfile

rm --force $tbtextfile
rm --force $manualtar

echo
gzip $tarball
chmod --verbose 0440 "$tarball.gz"      # this would also prevent overwrite on rerun

# ---------------------------------
#  completion reporting
# ---------------------------------

echo
ls --color=auto -lF "$tarball.gz"

echo
(                                       # CAUTION: note sub-shell
    cd "$TBDIR"                         # CAUTION: note change of directory
    ls --color=auto -lFd *              # CAUTION: no weak-quotes or strong-quotes
)

echo
echo "directory  : cd $TBDIR"
echo "summary    : filereport --omit $tarball.gz"
echo
echo "$SCRIPT: script complete"
echo "$SCRIPT: elapsed time: $SECONDS seconds"

echo

# ---------------------------------
#  housekeeping
# ---------------------------------

exit $E_SUCCESS

#  end of file

